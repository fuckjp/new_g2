<!DOCTYPE html><html lang="jp"><head><meta http-equiv="Content-Type" charset="UTF-8" /><title>[metatags_title]</title><meta name="keywords" content="[metatags_keywords]" /><meta name="description" content="[metatags_description]" /><meta property="og:title" content="血液の基礎知識｜日本赤十字社" /><meta property="og:description" content="[metatags_description]" /><meta property="og:url" content="http://www.jrc.or.jp/donation/first/knowledge/" /><meta property="og:image" content="/common/img/logo.png" /><meta name="viewport" content="width=device-width, maximum-scale=1.0, user-scalable=yes" /><link rel="shortcut icon" type="image/vnd.microsoft.icon" href="/common/img/favicon.ico" /> <link rel="apple-touch-icon-precomposed" href="/common/img/apple-touch-icon.png" /><link rel="stylesheet" type="text/css" href="/common/css/common.css" media="screen, tv, print" /><link rel="stylesheet" type="text/css" href="/common/css/box_min.css" media="screen, tv, print" /><link rel="stylesheet" type="text/css" href="/common/css/jquery.bxslider.css" media="screen, tv, print" /><link rel="stylesheet" type="text/css" href="/common/css/fancybox/jquery.fancybox-1.3.4.css" media="screen, tv, print" /><link rel="stylesheet" type="text/css" href="/common/css/print.css" media="print" /><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script><script type="text/javascript" src="/common/js/cookie.js"></script><!--[if lt IE 9]><script src="/common/js/html5shiv-printshiv.js" type="text/javascript"></script><![endif]--><script type="text/javascript" src="/common/js/slider_min.js"></script><script type="text/javascript" src="/common/js/common.js"></script><script type="text/javascript" src="/common/js/jquery.bxslider.min.js"></script><script type="text/javascript" src="/common/js/jquery.fancybox-1.3.4.js"></script><script type="text/javascript" src="/common/js/ga.js"></script></head><body><div id="LayerContainer">   <div id="LayerBase">     <header id="LayerHeader" role="banner" >       <div id="AreaHeader">        <div id="HeaderLeft">          <p id="logo">            <a href="/">              <img src="/common/img/logo.png" width="151" height="40" alt="日本赤十字社" />            </a>          </p>          <p class="skipLink">[hrefx]</p>          <noscript><p>このページではJavaScriptが必要です。</p></noscript>        </div>        <div id="HeaderRight">          <p class="en">[hrefx]</p>          <dl id="IdFontsize">            <dt>文字サイズ</dt>            <dd id="IdFontS" class="highlight">標準</dd>            <dd id="IdFontM">大</dd>            <dd id="IdFontL">特大</dd>          </dl>                    <div id="SearchWindow">            <script>              (function() {                var cx = '005228800467948046655:mxhxijepgtq';                var gcse = document.createElement('script');                gcse.type = 'text/javascript';                gcse.async = true;                gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +                    '//www.google.com/cse/cse.js?cx=' + cx;                var s = document.getElementsByTagName('script')[0];                s.parentNode.insertBefore(gcse, s);              })();            </script>            <gcse:searchbox-only></gcse:searchbox-only>          </div>          <p class="sp-search">検索</p>          <p class="sp-menu">MENU</p>        </div>        <p class="title-header">Japanese Red Cross Society</p>      </div>      <!-- /#AreaHeader -->       <div class="sp-search-contents">        <div id="SearchWindowSP">          <gcse:searchbox-only></gcse:searchbox-only>        </div>      </div><nav id="AreaGnavi" role="navigation">        <ul>          <li class="gnavi01">            <a href="/about/"  >赤十字について</a><div class="mega-menu">              <div class="mega-contents">                <a href="/about/" class="contents-left">                  <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>                  <p><img src="/common/img/mega_about_img.png"  width="130" height="130" alt=""></p>                  <p class="btn-gray-arrow"><span>トップへ</span></p>                </a>                <div class="contents-right">                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  </ul>                  <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx]</li>                  </ul>                  <h3>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h3>                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  </ul>                </div>              </div>            </div>          </li>          <li class="gnavi02">            <a href="/activity/"  >活動内容・実績を知る</a><div class="mega-menu">              <div class="mega-contents">                <a href="/activity/" class="contents-left">                  <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                  <p><img src="/common/img/mega_activities_img.png"  width="130" height="130" alt=""></p>                  <p class="btn-gray-arrow"><span>トップへ</span></p>                </a>                <div class="contents-right">                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]<br />災害や大事故などが発生したとき、いち早く医療救護活動を</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />海外で紛争や自然災害、病気などに苦しむ人びとを救うために</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />全国に92ある赤十字病院は、公的な医療機関として活動しています</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />看護大学の運営など、質の高い看護教育で社会に貢献</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />輸血を必要とする方は年間約120万人。その人びとのために</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />緊急時の手当て、事故防止に必要な知識や技術の普及のために</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]<br />子どもたちが自分で「気づき、考え、実行する」力を育む</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]<br />子どもや高齢者、障がい者の福祉サービスの向上のために</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]<br />世界中の約1700万人に支えられている赤十字の事業や活動</li>                  </ul>                </div>              </div>            </div>          </li>          <li class="gnavi03">            <a href="/contribute/"  >寄付する（個人・法人）</a><div class="mega-menu">              <div class="mega-contents">                <a href="/contribute/" class="contents-left">                  <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                  <p><img src="/common/img/mega_donation_img.png"  width="130" height="130" alt=""></p>                  <p class="btn-gray-arrow"><span>トップへ</span></p>                </a>                <div class="contents-right">                  <div class="mega-box">                    <a href="/contribute/support/#tabMenu1" class="box-contents">                      <p class="single-link">赤十字の会員（社員）になって支援する</p>                      <p><img src="/common/img/mega_donation_img01.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/contribute/support/#tabMenu2" class="box-contents">                      <p class="single-link">寄付をする</p>                      <p><img src="/common/img/mega_donation_img02.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/contribute/help/" class="box-contents">                      <p class="single-link">緊急救援・被災者支援</p>                      <p><img src="/common/img/mega_donation_img03.png" width="184" height="108" alt=""></p>                    </a>                  </div>                  <div class="mega-box">                    <a href="/enterprise/" class="box-contents">                      <p class="single-link">企業・団体の社会貢献担当の皆さま</p>                      <p><img src="/common/img/mega_donation_img04.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/contribute/isan/" class="box-contents">                      <p class="single-link">遺産・相続財産等のご寄付</p>                      <p><img src="/common/img/mega_donation_img05.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/contribute/qa/" class="box-contents">                      <p class="single-link">よくあるご質問</p>                      <p><img src="/common/img/mega_donation_img06.png" width="184" height="108" alt=""></p>                    </a>                  </div>                </div>              </div>            </div>          </li>          <li class="gnavi04">            <strong><a href="/donation/"  >献血する</a></strong><div class="mega-menu">              <div class="mega-contents">                <a href="/donation/" class="contents-left">                  <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                  <p><img src="/common/img/mega_blood_donation_img.png"  width="130" height="130" alt=""></p>                  <p class="btn-gray-arrow"><span>トップへ</span></p>                </a>                <div class="contents-right">                  <div class="mega-box">                    <a href="/donation/first/" class="box-contents">                      <p class="single-link">初めて献血される方へ</p>                      <p><img src="/common/img/mega_blood_donation_img01.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/donation/about/" class="box-contents">                      <p class="single-link">献血の流れについて</p>                      <p><img src="/common/img/mega_blood_donation_img02.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/donation/club/" class="box-contents">                      <p class="single-link">継続的に献血いただける方へ</p>                      <p><img src="/common/img/mega_blood_donation_img03.png" width="184" height="108" alt=""></p>                    </a>                  </div>                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  </ul>                </div>              </div>            </div>          </li>          <li class="gnavi05">            <a href="/volunteer/"  >ボランティアに参加する</a><div class="mega-menu">              <div class="mega-contents">                <a href="/volunteer/" class="contents-left">                  <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                  <p><img src="/common/img/mega_join_volunteer_img.png"  width="130" height="130" alt=""></p>                  <p class="btn-gray-arrow"><span>トップへ</span></p>                </a>                <div class="contents-right">                  <div class="mega-box">                    <a href="/volunteer/search/" class="box-contents">                      <p class="single-link">ボランティア情報・施設を探す</p>                      <p><img src="/common/img/mega_join_volunteer_img01.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/volunteer/about/" class="box-contents">                      <p class="single-link">赤十字ボランティアとは</p>                      <p><img src="/common/img/mega_join_volunteer_img02.png" width="184" height="108" alt=""></p>                    </a>                    <a href="/volunteer/activity/" class="box-contents">                      <p class="single-link">ボランティア活動事例</p>                      <p><img src="/common/img/mega_join_volunteer_img03.png" width="184" height="108" alt=""></p>                    </a>                  </div>                  <ul class="link-list-side">                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>                  </ul>                </div>              </div>            </div>          </li>         </ul>      </nav>      <!-- /#AreaGnavi -->    </header>    <!-- /#LayerHeader -->     <div id="LayerBody">       <div id="LayerContents">      <nav class="tnavi">        <ol>        <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>    <li><a href="/donation/">献血する</a></li>          <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>            <li><strong>血液の基礎知識</strong></li>        </ol>        </nav>        <div class="sns">          <p class="facebook">            <script type="text/javascript">              <!--              setUrl = '<iframe src="//www.facebook.com/plugins/like.php?href=';              setUrl = setUrl + 'http://' + location.hostname + location.pathname;              setUrl = setUrl + '&amp;width&amp;layout=button&amp;action=like&amp;show_faces=false&amp;share=false&amp;height=35" scrolling="no" frameborder="0" style="border:none; overflow:hidden; height:35px;" allowTransparency="true"></iframe>';              document.write(setUrl);              //-->            </script>          </p>          <p class="twitter">            [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]            <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script>          </p>        </div>        <p id="skip">ここから本文です</p>        <div id="LayerContentsMain">        <article role="main">        <h1>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h1>          <section id="LayerContentsBody"><h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2><div class="column2-sneak"><div class="column2-img-left w175">[metatags_descriptionx]<h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>[metatags_descriptionx]<h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>[metatags_descriptionx]</section>            <!-- /#LayerContentsBody -->         </article>    </div>        <!-- /#LayerContentsMain -->     <div id="LayerSnavi"><nav id="AreaLnavi" role="navigation">        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>        <ul>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                <ul>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx]            </li>            <li><strong>[hrefx][hrefx][hrefx][hrefx][hrefx]</strong>            </li>                </ul>            </li>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]            </li>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]            </li>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx]            </li>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx]            </li>            <li>        [hrefx][hrefx][hrefx][hrefx][hrefx]            </li>        </ul>      </nav>    </div>        <!-- /#LayerSnavi --> </div>      <!-- /#LayerContents -->       <p class="fnavi">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</p>    </div>    <!-- /#LayerBody -->     <footer id="LayerFooter" role="contentinfo">  <nav id="FooterNavi">    <ul>      <li class="fnavi01"><strong>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</strong></li>      <li class="fnavi02">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="fnavi03">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="fnavi04">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="fnavi05">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>    </ul>  </nav>  <div class="footer-link">    <ul>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>    </ul>    <ul>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="sp-br">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li class="sp-br">[hrefx][hrefx][hrefx][hrefx][hrefx]</li>      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]</li>    </ul>  </div>  <div class="area-copy">    <div class="clear">      <p class="f-logo"><img src="/common/img/f_logo.png" width="112" height="30" alt="日本赤十字社" /></p>      <p class="copy">Copyright &copy; 2014 Japanese Red Cross Society All rights reserved.</p>      </div>  </div></footer>     <!-- /#LayerFooter -->   </div>  <!-- /#LayerBase --> </div><!-- /#LayerContainer --><script type="text/javascript">  (function () {    var tagjs = document.createElement("script");    var s = document.getElementsByTagName("script")[0];    tagjs.async = true;    tagjs.src = "//s.yjtag.jp/tag.js#site=z0JshZS";    s.parentNode.insertBefore(tagjs, s);  }());</script><noscript>  <iframe src="//b.yjtag.jp/iframe?c=z0JshZS" width="1" height="1" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe></noscript><script type="text/javascript">//<![CDATA[(function() {var _analytics_scr = document.createElement('script');_analytics_scr.type = 'text/javascript'; _analytics_scr.async = true; _analytics_scr.src = '/_Incapsula_Resource?SWJIYLWA=2977d8d74f63d7f8fedbea018b7a1d05&ns=2';var _analytics_elem = document.getElementsByTagName('script')[0]; _analytics_elem.parentNode.insertBefore(_analytics_scr, _analytics_elem);})();// ]]></script></body></html>