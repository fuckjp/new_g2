<!DOCTYPE html><html lang="jp"><head><meta http-equiv="Content-Type" charset="UTF-8" />  <title>[metatags_title]</title>  <meta name="keywords" content="[metatags_keywords]" />  <meta name="description" content="[metatags_description]" />  <meta name="viewport" content="width=device-width, initial-scale=1.0">  <link rel="canonical" href="https://www.advan.co.jp/eshop/tile/">  <link rel="SHORTCUT ICON" href="/v2/img/favicon.png">  <!-- Bootstrap -->  <link href="/v2/css/bootstrap.css" rel="stylesheet" media="all">  <link href="/v2/css/font-awesome.css" rel="stylesheet">  <link href="/v2/css/header.css" rel="stylesheet" media="all">  <link href="/v2/css/frame.css" rel="stylesheet" media="all">  <link href="/v2/css/grid_system.css" rel="stylesheet" media="all">  <link href="/v2/css/second.css" rel="stylesheet" media="all">  <script src="/v2/js/jquery-1.10.2.min.js" type="text/javascript" ></script>  <script src="/v2/js/bootstrap.min.js" type="text/javascript" ></script>  <script src="/v2/js/jquery.browser.js"></script>  <script src="/v2/js/frame.js"></script>  <script src="/v2/js/overlaybox.js"></script>  <link href="/v2/css/overlaybox.css" rel="stylesheet" media="all"><script type="text/javascript">    $(function(){  $(".button_detail").click(function(){    $($(this).next(".textArea")).animate(      {height: "toggle", opacity: "toggle"},     "normal"    );$(this).hide();  });});</script>  <!--[if (gte IE 6)&(lte IE 8)]>    <script type="text/javascript" src="/v2/js/selectivizr-min.js"></script>  <![endif]-->  <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->  <!--[if lt IE 9]>    <script src="/v2/assets/js/html5shiv.js"></script>    <script src="/v2/assets/js/respond.min.js"></script>  <![endif]--></head><body id="top"><!-- container --><div class="container"><!-- header -->  <div id ="header">    <div class="row">      <!-- logo -->      <div class="span3" id="logo">       <!--[hrefx]-->      [hrefx][hrefx][hrefx][hrefx][hrefx]        </div>      <!-- menu -->      <div class="span6 offset1" id="top-sub-menu2">        <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>         <ul class="pull-right">        　<li>[hrefx][hrefx][hrefx]<span>|</span></li>          <li>[hrefx][hrefx][hrefx]<span>|</span></li>          <li>[hrefx][hrefx][hrefx]<span>|</span></li>          <li>[hrefx][hrefx][hrefx]<span>|</span></li>          <li>[hrefx][hrefx][hrefx]</li>          <!--          <li>[hrefx]<span>|</span></li>          <li>[hrefx]<span>|</span></li>          <li>[hrefx]</li>          -->        </ul>      </div>      <!-- login -->      <div class="span2 login-form" id="nologin_user_memu">        <form action="/cgi-bin/mt/shop.cgi">          <input type="hidden" name="__mode" value="shop_login">          <input type="hidden" name="_type" value="index">          <p id ="login">          <button class="btn btn-success" type="submit">ログイン / 会員登録</button>          </p>        </form>      </div>      <div class="span2 login-form" id="login_user_memu" style="display: none;">        <form action="/cgi-bin/mt/shop.cgi">          <input type="hidden" name="__mode" value="shop_logout">          <input type="hidden" name="_type" value="index">          <p id ="login">            <button class="btn btn-success" type="submit"><i class="icon-key icon-white"></i> ログアウトする</button>          </p>        </form>      </div>    </div>  </div><!-- main navi -->  <div class="row">  <div class="span12" id="mainnav" style="background:#428bca">      <ul>        <!-- <li>[hrefx]</li> -->        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>      </ul>    </div>  </div><ul class="breadcrumb" style="margin: 6px 0 0 0;padding: 3px;background: none;"><li>[hrefx][hrefx][hrefx][hrefx]</li> <li class="active"><span class="divider">/</span>タイル</li></ul>  <!-- main -->  <div id="main" style="margin-top:6px;">    <div class="row"><!-- LEFT -->      <div class="span2" id="left_sidebar"><div id="user">          <dl>            <dt>ようこそ！ <span class="member_name">ゲスト</span>様</dt>            <dd class="hold-point">保有ポイント</dd>            <dd><span class="label label-important member_point" style="font-weight: normal">0ポイント</span></dd>            <dd class="account" style="font-size:13px;font-weight:bold;">[hrefx]</dd>          </dl>        </div><div id=""><h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3> <form class="form-inline" role="form"  name="search" method="get" action="https://www.advan.co.jp/cgi-bin/mt/shop.cgi">             <div class="form-group">                   <input style="width:120px ; height:14px; font-size:12px; line-height:12px; " type="text" class="form-control" name="keyword" placeholder="キーワードを入力">        <style>:-ms-input-placeholder {vertical-align: top;</style>                           <input type="hidden" name="__mode" value="shop_goods_list" />                            <input type="hidden" name="_type" value="index" /><button class="btn btn-xs btn-primary" type="submit"><i class="icon-search icon-white"></i> </button>        </div>   </form><p style="font-size:11px; line-height:14px; margin: -18px 0px 8px 5px;">※ハイフン｢-」やドット｢.｣を外して入力して下さい。</p></div><div id="ad-rot">          <ul id="pr">          <li>[hrefx][hrefx][hrefx][hrefx]</li>                    <li>[hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx]</li>          <li>[hrefx][hrefx][hrefx][hrefx]</li>                 <li>[hrefx][hrefx][hrefx][hrefx]</li>                          <li>[hrefx][hrefx][hrefx][hrefx]</li>                          <!--          <li>[hrefx]</li>          <li><iframe src="/v2/swiffy/cm/swiffy.html" frameborder="0" width="160" height="160">          この部分はインラインフレームを使用しています。          </iframe>          </li>-->          </ul>        </div><style>#smp{  position: relative;  z-index: 100;  width: 160px;  margin: 0px 0 10px 0px;  padding: 0px 0px 0px 0px;  border-top: 1px solid #ddd;  border-radius: 0 0 3px 3px;  box-shadow: 1px 1px 1px #ddd, -1px 1px 1px #ddd;  font-size: 12px;  text-indent:-5px;  background: #fff;}.smptop{    color:#333;    font-size: 13px;        /*text-indent:2em;*/    text-align:center;        background: #eee;    font-weight:bold;    line-height:26px;    font-family:"ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic", sans-serif   width: 160px;   height:32px;   margin: 10px 0px 0px 0px;  padding:30px 0px 30px 0px;    }#smp li{  list-style-type : none;  margin: 0;  padding: 0;  color:#333;  border-top: 1px solid #eee;}#smp li a{  position: relative;  display: block;  padding: 8px 15px;  color: #2686C4;  text-decoration: none;  line-height: 15px;  font-family:"ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic", sans-serif}#smp > li:hover > a{  color: #2686C4;  /*background-color:#DCF2F6;*/  background-color:#DCF2F6;    text-decoration: underline;}#smp ul li a:hover{  color:#2686C4;  text-decoration: underline;background-color:#DCF2F6;}#smp > li:hover > a:after{  display: block;  position: absolute;  content: ""; top:-50px;  right: 5px;  width: 0px;  height: 0px;  margin-top: -8px;  border: 1px solid transparent;  border-left-color: #aaa;  background-color:#DCF2F6;}#smp ul{  display: none;  position: absolute;   top: auto;  right: -135px;/*right: -217px; */width: 165px;/*width: 200px;*/  height: auto;  margin-top:-36px;  padding: 15px 7px 15px 13px;/*padding: 15px 10px;*/  border-top: 2px solid #777;  border-right: 2px solid #777;  border-bottom: 3px solid #777;  border-left: 1px solid #777;  border-radius: 3px;box-shadow: 3px 3px 5px #aaa, 3px 0px 3px #ccc inset;z-index:1500; background-color:#ffffff;}#smp li:hover ul{  display: block;  background: #F5F5F5; }#smp ul.big{    right: -477px;    width: 460px;    margin:0px 0px 0px 0px;    padding:10px 0px 10px 0px;      background-color:#fff;    /*background: #DCF2F6; */}#smp ul.big li{  float: left;  width: 230px;}#smp ul li a{  padding: 4px 10px 4px 5px;;/* padding: 4px 15px;*/}</style><ul id="smp">  <li class="smptop"><i class="icon-align-justify"></i> カテゴリーから探す</li>  <li>    [hrefx][hrefx][hrefx][hrefx][hrefx]  </li>  <li>    [hrefx][hrefx][hrefx][hrefx][hrefx]    <!--ul>        <li>[hrefx]</li>        <li>[hrefx]</li>        <li>[hrefx]</li>        <li>[hrefx]</li>    </ul-->  </li>   <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>       <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>     <li>[hrefx][hrefx][hrefx][hrefx][hrefx]      <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    <li>[hrefx]</li>     <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>  <li>[hrefx][hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    <li>[hrefx]</li>    </ul>-->  </li>                 <li>[hrefx][hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>   <li>    [hrefx][hrefx][hrefx][hrefx][hrefx]       <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>  <li>    [hrefx][hrefx][hrefx]  </li>  <li>    [hrefx][hrefx][hrefx][hrefx]    <!--<ul>        <li>[hrefx]</li>        <li>[hrefx]</li>        <li>[hrefx]</li>        <li>[hrefx]</li>    </ul>-->  </li>     <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>     <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>     <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>     <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>                 <!--<li>[hrefx]     <ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>  </li>-->      <li>[hrefx][hrefx][hrefx][hrefx][hrefx]   <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>        <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>         <li>[hrefx][hrefx][hrefx][hrefx]  </li>           <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>    </ul>-->  </li>            <!--li>[hrefx]     <ul>      <li>[hrefx]</li>    </ul>  </li-->    <li>[hrefx][hrefx][hrefx][hrefx]  </li>        <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li>          <li>[hrefx][hrefx][hrefx][hrefx]     <!--<ul>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>      <li>[hrefx]</li>    </ul>-->  </li> </ul><!--smp--><div id="recent">          <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>        </div>        <div class="ad1">          <p>[hrefx][hrefx][hrefx]</p>        </div>              <div class="ad1">          <p>[hrefx][hrefx][hrefx]</p>        </div>        <div class="ad1">          <p>[hrefx][hrefx][hrefx]</p>        </div>              <div class="ad1">          <p>[hrefx][hrefx][hrefx][hrefx]</p>        </div>          <div class="ad1">            <p>[hrefx][hrefx][hrefx][hrefx]</p>          </div>                <!--div class="ad1">            <p>[hrefx]</p>        </div>        <div class="ad1">            <p>[hrefx]</p>        </div-->      </div>      <!-- CENTER -->      <div class="span8" id="main-content">        <div id="center-wrap"><style>h1.tile_title {	font-size:15px;	padding:0 0 0 5px;	border-left: 5px orangered solid;	clear:both;	margin:0 0 10px 2px;	clear:both;	line-height: 17px;	color: #484848;	font-family: "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic", sans-serif;}h2.sub_title {font-size:14px;line-height:1.5em;margin:5px 0;text-align:center;}</style><link rel="stylesheet" type="text/css" media="screen" href="/v2/css/jquery.bxslider.css" /><script type="text/javascript" src="/v2/js/jquery.bxslider.js"></script><script type="text/javascript" src="/v2/js/top-slider.js"></script>        <!--a href="/eshop/category/196"><img src="/v2/img/link-clip.jpg" style="margin:0 0 10px 0;"></a-->            <h1>[H1]</h1>            <p>「タイルのアドヴァン」が誇る充実のラインナップ。住宅から店舗・商業施設の床壁まですべて揃っています。<br>スタッフ一押し商品やセール商品もお見逃しなく！</p>   <div id="slider" style="margin:0 0 60px 0;">[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]	[hrefx][hrefx][hrefx]</div>            <!-- category -->            <div id="main-cat">       <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2>                    <p>在庫限り、爆下げ価格で大放出中！<br>ぜひお見逃しなく！！</p>                </div>       <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>内床にマット仕上げ、外床にはグリップ仕上げ。同じデザインで室内外の空間を統一することができます。</p>                </div>       <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>屋外の床に安心して使えるグリップタイル。雨の日でも安心してご利用いただける滑りにくいタイルです。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>玄関やキッチンにヨーロッパを感じさせるテラコッタタイル。滑りにくい商品もございます。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>丈夫さとヨゴレにくさから、インテリア床材として最適な素材のひとつと言われているタイル。多様なデザインのものを世界中から取り寄せ、日本の皆様へお届けします。タイルは熱の伝わりが良く、床暖房に最適です。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>壁面のタイルはデザインと個性を出す上に、汚れにくくメンテナンスフリーです。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>おしゃれなインテリアに欠かせないガラスモザイク。家が華やかになり、可愛らしさが加わります。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>レンガ風のブリックタイル、手軽に天然石材の重厚感を醸し出すセメントストーンなど、住宅や店舗に必須のおしゃれ壁です。</p>                </div>       <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>CONTINUA PLUS 、8 HEAD INK JET が天然石を超える迫力を生み出します。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>スリムタイルに1000×1000、1000×3000という新しいサイズが加わりました。 全てのスリムタイルは裏面をファイバーネットで強化している為、軽量なだけでなく、床への使用も可能です。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>木目をメンテナンスフリーのタイルで忠実に再現し、水場や外での使用を可能にしました。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>大理石をメンテナンスフリーのタイルで忠実に再現。使いやすさと美しさを両立させました。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>大理石調をマット仕上げ、半磨き（ラパート）仕上げ、グリップ仕上げにし、高級感と歩行性の両立しました。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>駐車場・ガレージにおすすめ。空港や駅、駐車場にも使用されるほどの耐久力。厚さ20mmの安心タイルも。</p>                </div>                    <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>コンビニやスーパーマーケットで定番の大理石調磨きから、高級ブランドショップ向けのこだわりデザインまで。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>ファサードの第一印象を決める外壁には、デザインにこだわりを。</p>                </div>                <div class="box">                    [hrefx][hrefx][hrefx][hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>適度に滑りにくい安心の機能タイルや、大理石をイメージした贅沢な壁タイルなどを厳選しました。</p>                </div>                <!--div class="box">                    [hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>価格と色でお探しのタイルを見つけることができます。130を超えるシリーズからお探しください。</p>                </div-->                <div class="box">                    [hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>汚れに強く、長く美しさを保ちたいならタイルの框がおススメです。框の加工も承ります。</p>                </div>                <div class="box">                    [hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>タイルと一緒に接着剤や目地材、施工用工具、タイルカッターなどもご購入いただけます。</p>                </div>                <div class="box">                    [hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                    <p>タイルで巾木を製作すれば、汚れに強く美しさが続き、機能的です。</p>                </div>                <div class="box">                    [hrefx]                    <h2>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h2>                </div>            </div><hr style="clear:both;">            [hrefx][hrefx][hrefx]            [hrefx][hrefx][hrefx]            [hrefx][hrefx][hrefx]            [hrefx][hrefx][hrefx]<hr style="clear:both;"><br><br>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]                    </div>      </div><!-- RIGHT -->        <div class="span2" id="right_sidebar"><div id="mitsumori">            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>            <dl>              <dt class="empty">[hrefx][hrefx][hrefx][hrefx][hrefx]</dt>            </dl>          </div>                <p><a class="btn btn-primary  btn-block btn-danger" type="button" href="/quickorder.html">見積簡単！品番で注文</a></p><div id="telObj">           <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>[metatags_descriptionx]<!--p style="margin-top: 10px">●水栓メンテナンスに関するお問い合わせ●<br><span><i class="icon-phone"></i> 0120-301-211</span><br>24時間受付</p>          <p><span><i class="icon-print"></i> 052-883-0769</span><br>fax 24時間受付</p--></div>           [hrefx][hrefx][hrefx][hrefx][hrefx]           [hrefx][hrefx][hrefx][hrefx]                    [hrefx][hrefx][hrefx][hrefx]          <div id="web-catalog">            <h3>[metatags_titlex],[metatags_titlex][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex]</h3>          <p><a href="/catalog/" target="_blank"><img src="/v2/catalog/cata_tile.jpg" alt="webカタログ" width="108" style="margin-bottom:5px;"/></a><br>            [hrefx][hrefx][hrefx][hrefx]            </p>          </div>          <div id="sns">            <p>公式アカウント運営中</p>            [hrefx][hrefx][hrefx][hrefx]            [hrefx][hrefx][hrefx][hrefx]            [hrefx][hrefx][hrefx][hrefx]          </div>          <div class="ad1">            <p>[hrefx][hrefx][hrefx][hrefx]</p>          </div>                   <div class="ad1">            <p>[hrefx][hrefx][hrefx]</p>          </div>                <div class="ad1">          <p>[hrefx][hrefx][hrefx]</p>        </div>                  <!--div class="ad1">            <p>[hrefx]</p>          </div>          <div class="ad1">            <p>[hrefx]</p>          </div-->          <div class="ad1">            <p>[hrefx][hrefx][hrefx]</p>          </div>          <div class="ad1">            <p>[hrefx][hrefx][hrefx][hrefx]</p>          </div>          <!--div class="ad1">            <p>[hrefx]</p>          </div-->        <div class="ad1">          <p>[hrefx][hrefx][hrefx][hrefx]</p>        </div>          <div class="ad1">            <p>[hrefx][hrefx][hrefx][hrefx]</p>          </div>          <div class="ad1">          <p>[hrefx][hrefx][hrefx]</p>          </div>                  <div class="ad1">            <p>[hrefx][hrefx][hrefx][hrefx]</p>          </div>                     <!--div class="ad1">            <p>[hrefx]</p>          </div-->         </div><!-- //span2 -->    </div>  </div>  <div id="pagetop" class="span2 offset10">    <ul><li>[hrefx][hrefx][hrefx][hrefx]</li></ul>  </div><ul class="breadcrumb" style="clear:both; margin:0">                        <li>[hrefx][hrefx][hrefx][hrefx]</li>                                                                                                <li class="active"><span class="divider">/</span>                                            タイル                                    </li>                        </ul><div id="footer" class="span12">    <div id="foot-menu">      <ul>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx]</li>        <li>[hrefx][hrefx][hrefx][hrefx]</li>      </ul>    </div>    <div class="row">      <div class="span6" id="foot-logo">        <!--[hrefx]-->        [hrefx][hrefx][hrefx][hrefx]      </div>      <div class="span6">        <div id="foot-nav">          <ul>            <li>[hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx][hrefx]</li>            <li>[hrefx][hrefx][hrefx][hrefx]</li>          </ul>        </div>      </div>    </div>  </div><!-- //footer -->  <!-- <div style="text-align: center;">[hrefx]</div> -->  <div id="copy" class="span12"><p>Copyright © ADVAN Co.,Ltd. All Rights Reserved.</p></div><script type="text/javascript">  /* スマホサイト切り替えリンク表示 */  // $(function(){  //     // スマートフォンページ非対応URL(ブラックリスト)判定処理  //     var excRoot = "company/|special/kakou/|special/kamachi/|business-credit/|stove/";  //     var excEshop = "eshop/voice.html|eshop/media.html|eshop/minikitchin/apparta_series/order_form.html|eshop/latest-cm.html|eshop/serch-data-washbowl.html|eshop/serch-data-suisen.html|eshop/serch-data-set.html|eshop/serch-data-ksuisen.html|eshop/serch-data-kitchen.html|eshop/serch-data-senmendai.html|eshop/serch-data-showerbooth.html|eshop/serch-data-shower.html|eshop/serch-data-haisui.html|eshop/serch-data-stove.html|eshop/serch-data-galage.html|eshop/serch-data-mirror.html|eshop/apparta-zumen-download.html|eshop/tile/tile-index.html|eshop/material/kbr17971.html|eshop/material/kbr13968.html";  //     var uri = window.location.href ;  //     reqUri = uri.replace( /#/g , "" ) ;  //     excUrlList = excRoot + excEshop;  //     // "|"で文字列を分割  //     excUrlListArray = excUrlList.split("\|");  //     // 配列の要素数分ループを回してブラックリスト判定を行う  //     for( var h=0 ; h<excUrlListArray.length ; h++ ) {  //         var excuri = new RegExp(excUrlListArray[h],'i');  //       if (reqUri.match(excuri) != null) {  //           return;  //       }  //     }  //     // UserAgent判定処理  //     var userAgent = navigator.userAgent;  //     var incUA = "iPhone|iPod|Android|BlackBerry|Windows.Phone";  //     var excUA = "iPad";  //     // パイプで分割し配列に格納  //     var arrayIncUA = incUA.split("|");  //     var arrayExcUA = excUA.split("|");  //     // 配列の要素数分ループを回してUA判定を行う  //     for( var i=0 ; i<arrayExcUA.length ; i++ ) {  //         var excreg = new RegExp(arrayExcUA[i],'i');  //       if (userAgent.match(excreg) != null) {  //           return;  //       }  //     }  //     for( var j=0 ; j<arrayIncUA.length ; j++ ) {  //         var increg = new RegExp(arrayIncUA[j],'i');  //       if (userAgent.match(increg) != null) {  //           $("#sp_switch").css("display", "");  //           break;  //       }  //     }  // });  /* スマホサイト表示(cookieにnosp=0を設定) */  // function changeMode() {  //     document.cookie = 'nosp=0; path=/;';  //     location.reload(true);  // }</script></div><!-- end of container --><!--<script type="text/javascript" src="/v2/js/scroll.js" ></script>--> <script type="text/javascript">    var username = '';    randomtip = function(){        var length = $("#pr li").length;        var ran = Math.floor(Math.random()*length) + 1;        jQuery("#pr li:nth-child(" + ran + ")").show();    }    /* カートの表示 */    display_cart = function(cartinfo) {        if (cartinfo && cartinfo.num > 0 && cartinfo.items && cartinfo.items.length > 0) {            var items = cartinfo.items;            var h = '<h3>[H3]</h3>';            for (var i in items) {                h += '<dl>';                h += '<dt><a href="/eshop/items/' + items[i].goods_code + '/">';                h += items[i].goods_name + '</a></dt>';                h += '<dd class="size">' + items[i].goods_size + '</dd>';                h += '<dd>' + items[i].price + '円 x ';                h += items[i].amount + items[i].goods_unit + ' =</dd>';                h += '<dd class="price">' + items[i].item_price + '円</dd>';                h += '<dd class="btn">[hrefx]</dd>';                h += '</dl>';            }            h += '<ul id="subtotal">';            h += '<li>小計</li>';            h += '<li>' + cartinfo.total_price + '円</li>';            h += '</ul>';            h += '<p>[hrefx]</p>';            jQuery('#mitsumori').html(h).show();        }        else {            var h = '<h3>[H3]</h3>';            h += '<dl><dt class="empty">[hrefx]</dt></dl>';            jQuery('#mitsumori').html(h).show();        }    }    /* カート内の商品削除　*/    delete_cart_item = function(cart_item_id) {        jQuery.getJSON( '/cgi-bin/mt/shopapi.cgi?__mode=shop_api&_type=delete_cart_item&id=' + cart_item_id,            function(data) {                display_cart(data.cartinfo);            }        );    }    shuffle_array = function(arr) {        var i = arr.length;        while(i) { var j = Math.floor(Math.random() * i); var x = arr[--i]; arr[i] = arr[j]; arr[j] = x; }        return arr;    }    /* 初期読み込み時の処理 */    jQuery(document).ready(function(){        /* バナーのランダム表示 */        randomtip();        /* ログイン情報の表示 */        jQuery.ajaxSetup({ cache: false, scriptCharset: "utf-8", contentType: "application/json; charset=utf-8" });        jQuery.getJSON( '/cgi-bin/mt/shopapi.cgi?__mode=shop_api&_type=memberinfo',            function(data) {                if (data.memberinfo.is_login) {                    jQuery('span.member_name').html(data.memberinfo.member_name);                    jQuery('span.member_point').html(data.memberinfo.member_point + 'ポイント');                    jQuery('span.mypage_point').html(data.memberinfo.member_point);                    jQuery('li.pointdate').html(data.memberinfo.point_expire);                    var href_catalog = $('#catalog_claim').attr('href');                    jQuery('#catalog_claim').attr('href',href_catalog + '?id=' + data.memberinfo.member_id);                    var href_samplebook = $('#samplebook_claim').attr('href');                    jQuery('#samplebook_claim').attr('href',href_samplebook + '?id=' + data.memberinfo.member_id);                    jQuery('#login_user_memu').show();                    jQuery('#nologin_user_memu').hide();                    username = data.memberinfo.member_name;                } else {                    jQuery('span.member_name').html('ゲスト');                    jQuery('span.member_point').html('0ポイント');                    jQuery('span.mypage_point').html('0');                    jQuery('li.pointdate').html('');                    var websiteurl = $(location).attr('protocol') + '//' + $(location).attr('host');                    var loginlink = websiteurl + '/cgi-bin/mt/shop.cgi?__mode=shop_login&_type=index';                    jQuery('#catalog_claim').attr('href',loginlink);                    jQuery('#samplebook_claim').attr('href',loginlink);                    jQuery('#nologin_user_memu').show();                    jQuery('#login_user_memu').hide();                }                display_cart(data.cartinfo);            }        );        /* 最近見た商品 JSON取得 */        jQuery.getJSON( '/cgi-bin/mt/shopapi.cgi?__mode=shop_api&_type=recent&file=5&lastn=5',            function(data) {                if (data.recent.goods.length) {                    var goods = shuffle_array(data.recent.goods);                    var h = '<h3>[H3]</h3>';                    h += '<ul>';                    for (var i in goods) {                        if (goods[i].contents) h += goods[i].contents;                    }                    h += '</ul>';                    jQuery('#recent').html(h).show();                }            }        );    });  </script><script type="text/javascript"> var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www."); document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E")); </script> <script type="text/javascript"> try { var pageTracker = _gat._getTracker("UA-10307198-5"); pageTracker._trackPageview(); } catch(err) {}</script><div style="display:none;"><!-- Google remarketing tag --><script type="text/javascript">/* <![CDATA[ */var google_conversion_id = 1057748894;var google_custom_params = window.google_tag_params;var google_remarketing_only = true;/* ]]> */</script><script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js"></script><noscript><div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/1057748894/?value=0&amp;guid=ON&amp;script=0"/></div></noscript><!-- Yahoo retargeting tag --><script type="text/javascript" language="javascript">var yahoo_retargeting_id = 'P6NE88JLIJ';var yahoo_retargeting_label = '';</script><script type="text/javascript" language="javascript" src="//b92.yahoo.co.jp/js/s_retargeting.js"></script><!-- WevNAL Google remarketing tag --><script type="text/javascript">/* <![CDATA[ */var google_conversion_id = 928934854;var google_custom_params = window.google_tag_params;var google_remarketing_only = true;/* ]]> */</script><script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js"></script><noscript><div style="display:inline;"><img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/928934854/?value=0&amp;guid=ON&amp;script=0"/></div></noscript><!-- WevNAL Yahoo retargeting tag --><script type="text/javascript" language="javascript">/* <![CDATA[ */var yahoo_retargeting_id = '5W7RTBB4FK';var yahoo_retargeting_label = '';/* ]]> */</script><script type="text/javascript" language="javascript" src="//b92.yahoo.co.jp/js/s_retargeting.js"></script></div></body></html>