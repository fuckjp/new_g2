<!doctype html><html lang="jp" prefix="og: http://ogp.me/ns#"><head><meta http-equiv="Content-Type" charset="UTF-8" /><title>[metatags_title]</title><meta name="description" content="[metatags_description]"><meta property="og:title" content="[metatags_title]"><meta property="og:description" content="[metatags_description]"><meta property="og:url" content="http://www.chietoku.jp/water-boiling/?ref=fb"><script src="/cdn-cgi/apps/head/dgMr1Uj1Lvpieu8tt0eK7xUMBJ0.js"></script><link rel="canonical" href="http://www.chietoku.jp/water-boiling/"/><meta property="og:image" content="http://files.imishincdn.com/wp-content/uploads/2016/05/275ac846f1fc26efd8ba3bdfb166c071.jpeg"><meta property="og:site_name" content="ちえとく"><meta property="og:type" content="article"><meta property="article:publisher" content="https://www.facebook.com/chietoku.jp"><meta property="fb:admins" content="100007318950068"/> <meta name="twitter:card" content="summary_large_image"><meta name="twitter:title" content="[metatags_title]"><meta name="twitter:description" content="[metatags_description]"><meta name="twitter:image" content="http://files.imishincdn.com/wp-content/uploads/2016/05/275ac846f1fc26efd8ba3bdfb166c071.jpeg"><META NAME="ROBOTS" CONTENT="NOARCHIVE"><META NAME="GOOGLEBOT" CONTENT="NOARCHIVE"><meta name="viewport" content="width=device-width, initial-scale=1.0"/><link rel="stylesheet" href="http://files.imishincdn.com/wp-content/themes/heftig/static/css/new_style.css?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b"><link rel="stylesheet" href="http://files.imishincdn.com/wp-content/themes/heftig/static/css/modal.css"><link rel="stylesheet" href="http://files.imishincdn.com/wp-content/themes/heftig/static/css/style.css?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b" media="screen"><link rel="stylesheet" href="http://files.imishincdn.com/wp-content/themes/heftig/static/css/editor-style.css?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b" media="screen"><style>        @font-face {            font-family: 'fontello';            src: url('http://www.chietoku.jp/wp-content/themes/font/fontello.eot?22776552');            src: url('http://www.chietoku.jp/wp-content/themes/font/fontello.eot?22776552#iefix') format('embedded-opentype'),            url('http://www.chietoku.jp/wp-content/themes/font/fontello.woff?22776552') format('woff'),            url('http://www.chietoku.jp/wp-content/themes/font/fontello.ttf?22776552') format('truetype'),            url('http://www.chietoku.jp/wp-content/themes/font/fontello.svg?22776552#fontello') format('svg');            font-weight: normal;            font-style: normal;        }    </style><style>.fb_iframe_widget_fluid span{    max-width:100%;}.fb_iframe_widget iframe{    max-width: 100%;}.teads-inread{    margin-bottom:20px;}.flickr-wrapper{    overflow:hidden;    margin: 1em 0;}.flickr-wrapper-inner{    position: relative;    padding-bottom: 56.25%;    height: 0;    overflow: hidden;}.flickr-wrapper-inner iframe, .flickr-wrapper-inner img{    max-width: 100% !important;    height:auto;}</style><script>    var mp = mp || {};    mp.post = mp.post || {};    mp.post.vertical = 'lifehacks';</script><link rel="stylesheet" href="http://files.imishincdn.com/wp-content/themes/heftig/static/css/fontello.css?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b"><script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script><script src="http://files.imishincdn.com/wp-content/themes/heftig/static/js/jquery.cookie.js"></script><script src="http://files.imishincdn.com/wp-content/themes/heftig/static/js/main.js?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b"></script><script src="http://files.imishincdn.com/wp-content/themes/heftig/static/js/tracking.js?v=e62c6b106d70dc9e9a9f7c978fe195f6bb21d81b"></script><link rel="alternate" type="application/rss+xml" title="imishin &raquo; [标题] Comments Feed" href="http://www.chietoku.jp/water-boiling/feed/"/><link rel="prev" title="暑い日に最高。そして見た目通りに昇天できます。" href="http://www.chietoku.jp/himmlischer-shake/"/><link rel="next" title="この美味しいパンを食べれば健康的にお腹が満たされる。そして簡単にできる！" href="http://www.chietoku.jp/popeyes-lieblingsbrot/"/><script>    function testNotiOSAndCanShowIS(userAgent) {        var r = new RegExp("iPhone|iPad|iPod");        return !r.test(userAgent)            && (!localStorage.hasOwnProperty('mp_last_is')                || isNaN(Date.parse(localStorage.mp_last_is))                || Date.parse(localStorage.mp_last_is) < (new Date()));    }    function registerNoniOSISOpportunity() {        var date = new Date();        date.setDate( date.getDate() + 1);        localStorage.mp_last_is = date;    }    function testIsMobile(userAgent) {        var r = new RegExp("Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini");        var mobile = r.test(userAgent);        var tablets = {            "iPad": "iPad|iPad.*Mobile",            "NexusTablet": "Android.*Nexus[\\s]+(7|9|10)",            "SamsungTablet": "SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561",            "Kindle": "Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI)\\b",            "SurfaceTablet": "Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",            "HPTablet": "HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",            "AsusTablet": "^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K017 |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C",            "BlackBerryTablet": "PlayBook|RIM Tablet",            "HTCtablet": "HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",            "MotorolaTablet": "xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",            "NookTablet": "Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",            "AcerTablet": "Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b",            "ToshibaTablet": "Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",            "LGTablet": "\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",            "FujitsuTablet": "Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",            "PrestigioTablet": "PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",            "LenovoTablet": "Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)",            "DellTablet": "Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",            "YarvikTablet": "Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",            "MedionTablet": "Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",            "ArnovaTablet": "AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",            "IntensoTablet": "INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",            "IRUTablet": "M702pro",            "MegafonTablet": "MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",            "EbodaTablet": "E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",            "AllViewTablet": "Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",            "ArchosTablet": "\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",            "AinolTablet": "NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",            "SonyTablet": "Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP612|SOT31",            "PhilipsTablet": "\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",            "CubeTablet": "Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",            "CobyTablet": "MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",            "MIDTablet": "M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",            "MSITablet": "MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",            "SMiTTablet": "Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",            "RockChipTablet": "Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",            "FlyTablet": "IQ310|Fly Vision",            "bqTablet": "Android.*(bq)?.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris E10)|Maxwell.*Lite|Maxwell.*Plus",            "HuaweiTablet": "MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim",            "NecTablet": "\\bN-06D|\\bN-08D",            "PantechTablet": "Pantech.*P4100",            "BronchoTablet": "Broncho.*(N701|N708|N802|a710)",            "VersusTablet": "TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",            "ZyncTablet": "z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900",            "PositivoTablet": "TB07STA|TB10STA|TB07FTA|TB10FTA",            "NabiTablet": "Android.*\\bNabi",            "KoboTablet": "Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",            "DanewTablet": "DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",            "TexetTablet": "NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",            "PlaystationTablet": "Playstation.*(Portable|Vita)",            "TrekstorTablet": "ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",            "PyleAudioTablet": "\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",            "AdvanTablet": "Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",            "DanyTechTablet": "Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",            "GalapadTablet": "Android.*\\bG1\\b",            "MicromaxTablet": "Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",            "KarbonnTablet": "Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",            "AllFineTablet": "Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",            "PROSCANTablet": "\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",            "YONESTablet": "BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",            "ChangJiaTablet": "TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",            "GUTablet": "TX-A1301|TX-M9002|Q702|kf026",            "PointOfViewTablet": "TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",            "OvermaxTablet": "OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)",            "HCLTablet": "HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",            "DPSTablet": "DPS Dream 9|DPS Dual 7",            "VistureTablet": "V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",            "CrestaTablet": "CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",            "MediatekTablet": "\\bMT8125|MT8389|MT8135|MT8377\\b",            "ConcordeTablet": "Concorde([ ]+)?Tab|ConCorde ReadMan",            "GoCleverTablet": "GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",            "ModecomTablet": "FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",            "VoninoTablet": "\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",            "ECSTablet": "V07OT2|TM105A|S10OT1|TR10CS1",            "StorexTablet": "eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",            "VodafoneTablet": "SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7",            "EssentielBTablet": "Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",            "RossMoorTablet": "RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",            "iMobileTablet": "i-mobile i-note",            "TolinoTablet": "tolino tab [0-9.]+|tolino shine",            "AudioSonicTablet": "\\bC-22Q|T7-QC|T-17B|T-17P\\b",            "AMPETablet": "Android.* A78 ",            "SkkTablet": "Android.* (SKYPAD|PHOENIX|CYCLOPS)",            "TecnoTablet": "TECNO P9",            "JXDTablet": "Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",            "iJoyTablet": "Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",            "FX2Tablet": "FX2 PAD7|FX2 PAD10",            "XoroTablet": "KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",            "ViewsonicTablet": "ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",            "OdysTablet": "LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",            "CaptivaTablet": "CAPTIVA PAD",            "IconbitTablet": "NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",            "TeclastTablet": "T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",            "OndaTablet": "\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+",            "JaytechTablet": "TPC-PA762",            "BlaupunktTablet": "Endeavour 800NG|Endeavour 1010",            "DigmaTablet": "\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",            "EvolioTablet": "ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",            "LavaTablet": "QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",            "AocTablet": "MW0811|MW0812|MW0922|MTK8382",            "MpmanTablet": "MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",            "CelkonTablet": "CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",            "WolderTablet": "miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",            "MiTablet": "\\bMI PAD\\b|\\bHM NOTE 1W\\b",            "NibiruTablet": "Nibiru M1|Nibiru Jupiter One",            "NexoTablet": "NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",            "LeaderTablet": "TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",            "UbislateTablet": "UbiSlate[\\s]?7C",            "PocketBookTablet": "Pocketbook",            "Hudl": "Hudl HT7S3|Hudl 2",            "TelstraTablet": "T-Hub2",            "GenericTablet": "Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bJolla\\b|\\bTP750\\b"        };        for (var key in tablets) {            if (tablets.hasOwnProperty(key)) {                r = new RegExp(tablets[key]);                if (r.test(userAgent)) {                    mobile = false;                    break;                }            }        }        return mobile;    }    is_mobile = testIsMobile(navigator.userAgent);    is_allowed_is_today = testNotiOSAndCanShowIS(navigator.userAgent);    var post_show_all_ads = false;    //http://stackoverflow.com/questions/5448545/how-to-retrieve-get-parameters-from-javascript    function getGetParameter(val) {        var result = false,            tmp = [];        var items = location.search.substr(1).split("&");        for (var index = 0; index < items.length; index++) {            tmp = items[index].split("=");            if (tmp[0] === val) result = decodeURIComponent(tmp[1]);        }        return result;    }  var _gaq = _gaq || [];  _gaq.push(['_setPageGroup', '5', 'lifehacks']);</script><script>        !function (f, b, e, v, n, t, s) {            if (f.fbq)return;            n = f.fbq = function () {                n.callMethod ?                    n.callMethod.apply(n, arguments) : n.queue.push(arguments)            };            if (!f._fbq)f._fbq = n;            n.push = n;            n.loaded = !0;            n.version = '2.0';            n.queue = [];            t = b.createElement(e);            t.async = !0;            t.src = v;            s = b.getElementsByTagName(e)[0];            s.parentNode.insertBefore(t, s)        }(window,            document, 'script', '//connect.facebook.net/en_US/fbevents.js');        fbq('init', '1651945871688146');        fbq('track', 'PageView');    </script><noscript><img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=1651945871688146&ev=PageView&noscript=1"/></noscript><script type="text/javascript">    var crtg_nid = '3638';    var crtg_cookiename = 'crtg_rta';    var crtg_varname = 'crtg_content';    function crtg_getCookie(c_name) {        var i, x, y, ARRCookies = document.cookie.split(";");        for (i = 0; i < ARRCookies.length; i++) {            x = ARRCookies[i].substr(0, ARRCookies[i].indexOf("="));            y = ARRCookies[i].substr(ARRCookies[i].indexOf("=") + 1);            x = x.replace(/^\s+|\s+$/g, "");            if (x == c_name) {                return unescape(y);            }        }        return '';    }    var crtg_content = crtg_getCookie(crtg_cookiename);    var crtg_rnd = Math.floor(Math.random() * 99999999999);    (function () {        var crtg_url = location.protocol + '//rtax.criteo.com/delivery/rta/rta.js?netId=' + escape(crtg_nid);        crtg_url += '&cookieName=' + escape(crtg_cookiename);        crtg_url += '&rnd=' + crtg_rnd;        crtg_url += '&varName=' + escape(crtg_varname);        var crtg_script = document.createElement('script');        crtg_script.type = 'text/javascript';        crtg_script.src = crtg_url;        crtg_script.async = true;        if (document.getElementsByTagName("head").length > 0)document.getElementsByTagName("head")[0].appendChild(crtg_script);        else if (document.getElementsByTagName("body").length > 0)document.getElementsByTagName("body")[0].appendChild(crtg_script);    })();</script><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><script>    (adsbygoogle = window.adsbygoogle || []).push({    google_ad_client: 'ca-pub-4091049668524706',    enable_page_level_ads: true});</script><script type="text/javascript">    var googletag = googletag || {};    googletag.cmd = googletag.cmd || [];    (function () {        var gads = document.createElement('script');        gads.async = true;        gads.type = 'text/javascript';        var useSSL = 'https:' == document.location.protocol;        gads.src = (useSSL ? 'https:' : 'http:') +        '//www.googletagservices.com/tag/js/gpt.js';        var node = document.getElementsByTagName('script')[0];        node.parentNode.insertBefore(gads, node);    })();</script><script type="text/javascript">    googletag.cmd.push(function () {        if (is_mobile) {            googletag.defineSlot('/115432722/imishin.co_MB_MidAd_Video_300x250', [300, 250], 'div-gpt-ad-1472200645603-0').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_MB_uLogo_300x250', [300, 250], 'div-gpt-ad-1475761348412-0').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_MB_MidAd_300x250', [300, 250], 'div-gpt-ad-1444214629237-4').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_MB_300x250_longArticle', [300, 250], 'div-gpt-ad-1468932691490-0').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_MB_uHeadline_300x250', [300, 250], 'div-gpt-ad-1450452939781-0').addService(googletag.pubads());        } else {            googletag.defineSlot('/115432722/imishin.jp_DT_Billboard', [[728, 90], [800, 250], [970, 250]], 'div-gpt-ad-1444214629237-0').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_DT_MidAd_300x250', [300, 250], 'div-gpt-ad-1444214629237-1').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_DT_Rechts_300x600', [[300, 600], [300, 250]], 'div-gpt-ad-1444214629237-2').addService(googletag.pubads());            googletag.defineSlot('/115432722/imishin.jp_DT_300x250_longArticle', [300, 250], 'div-gpt-ad-1467297081622-0').addService(googletag.pubads());        }        var crtg_split = (crtg_content || '').split(';');        var pubads = googletag.pubads();        for (var i = 1; i < crtg_split.length; i++) {            pubads.setTargeting("" + (crtg_split[i - 1].split('='))[0] + "", "" + (crtg_split[i - 1].split('='))[1] + "");        }        //googletag.pubads().enableSingleRequest();        googletag.enableServices();    });</script><script>    var HT = new HeftigTracker();    HT.init("http://t.mediapartisans.com/track.php");    HT.addDefaultProperty("post_id", 67540);    HT.addDefaultProperty("page_lang", "jp");    HT.addDefaultProperty("is_mobile", is_mobile);        var refVideo = getGetParameter('ref') == 'video';    if (refVideo && is_mobile) {        is_allowed_is_today = false;        if (typeof cookieInfoSettings != "undefined") {            cookieInfoSettings = undefined;        }    }</script></head><body><div id="fb-root"></div><script>    var cms_lang = "jp";    var post_is_sponsored = false;    var post_vertical = "lifehacks";      window.fbAsyncInit = function() {        FB.init({          status     : true,          xfbml      : true,          appId: '220887774939003',          version: 'v2.5'        });        FB.Event.subscribe('edge.create', function(targetUrl, elem) {            var from = "";            var like_classes = ['fb-model', 'facebook-like-box-right', 'facebook-like-next-share', 'facebook-like-slider', 'facebook-like-box-mobile', 'facebook-facepile', 'fb-overlay-bottom', 'fb-overlay-center'];            $.each(like_classes, function( index, className ) {				if ($(elem).hasClass(className) === true) {					from = className;				}			});			if (targetUrl.indexOf('facebook.com/chietoku.jp') != -1) {				dontAskFBAgain();				$.cookie('likedfblifehacks', true, { expires: 365 , path: "/"});				trackPageLike(from);			}		});      };    (function(d, s, id) {        var js, fjs = d.getElementsByTagName(s)[0];        if (d.getElementById(id)) return;        js = d.createElement(s); js.id = id;        js.src = "//connect.facebook.net/ja_JP/sdk/xfbml.ad.js";        fjs.parentNode.insertBefore(js, fjs);    }(document, 'script', 'facebook-jssdk'));    //(function(d, s, id){    // var js, fjs = d.getElementsByTagName(s)[0];    // if (d.getElementById(id)) {return;}    // js = d.createElement(s); js.id = id;    // js.src = "//connect.facebook.net////all.js";    // fjs.parentNode.insertBefore(js, fjs);    //}(document, 'script', 'facebook-jssdk'));    //Variations    var post_variation = "0_0";    function trackShare(type, from, show_ads) {        HT.track("share", HT.mergeObjects(HT.testProperties,{"from":from}));        trackLogEvent(post_id, post_variation, "share");    }    function trackPageLike(from) {        trackLogEvent(post_id, post_variation, "like");        HT.track("page_like", HT.mergeObjects(HT.testProperties,{"from":from,"post_url":document.URL}));    }    function trackLogEventV2(postId,variation,event){        if(postId instanceof Array) postId = postId.join("|");        if(variation instanceof Array) variation = variation.join("|");        if(event instanceof Array) event = event.join("|");        var script = document.createElement('script');        script.type = 'text/javascript';        script.src = "http://log.imishin.jp/log_event.php?v=2&m="+(is_mobile?1:0)+"&post_id="+postId+"&event="+event+"&var="+variation;        $("head").append(script);    }    function addDoNotShowInRecommended(postId){        //no-recommended-js        var tmpCookieConf = $.cookie.raw;        $.cookie.raw = true;        var norejs = $.cookie("norejs") || "";        norejs = norejs == ""?[]:norejs.split("|");        if(typeof postId != "undefined" && $.inArray(String(postId),norejs) == -1) {            norejs.push(String(postId));            var norejsLength = norejs.length;            if (norejsLength > 20){                norejs.splice(0,norejsLength-20);            }            $.cookie("norejs", norejs.join("|"), {expires: 365, path: "/"});        }        $.cookie.raw = tmpCookieConf;        return norejs;    }    function getDoNotShowInRecommended(){        return addDoNotShowInRecommended();    }    function setDoNotShowTestsInRecommended(){        $.cookie("no_test_rejs",1,{expires : 1/12, path: "/"});    }    function showTestsInRecommended(){        return !post_show_all_ads && ($.cookie("no_test_rejs",Number) || 0) == 0;    }    function trackLogEvent(post_id, variation, event, link_post_ids, link_variations) {        trackLogEventV2(post_id,variation,event);    }    var clicked_recommendation_url;    function heftigLogFinished() {        if (typeof clicked_recommendation_url != "undefined") {            document.location.href=clicked_recommendation_url;        }    }    function shareOnFacebook(from){        window.open('http://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(globalFacebookShareObject.link),'','toolbar=0,status=0,width=626,height=436');        trackShare('post facebook share', from);    }    function dontAskFBAgain() {        $.cookie('dontaskfb', true, {path: "/"});    }    function showFB() {        return $.cookie('dontaskfb') != "true";}function likedFB() {	return $.cookie('likedfblifehacks') == "true";}var show_adsense_is = null;function showAdsenseIS() {        return false;    }function showAdsenseModal() {	if (showAdsenseIS() === true) {        showAdsenseInterstitial();	} else {		$('.page-all').show();	}}function showAdsenseInterstitial() {    $('.page-all').hide();    $('.is-modal-ad').show();	$('body').css('background', '#333');}function hideAdModal(){    $('.is-modal-ad').hide();    $('.page-all').show();    if (typeof stretchForAd == 'function' ){        stretchForAd();    }}$(function() {		if (is_mobile == true) {        $('.page-content').css('float','none'); //don't need it fixes twitter mobile        $('.page-all').children('div:not(.cookie-info)').css('display',''); // don't need this for mobile		$('.recommended-inner').css('width', '300px');		//set iframe to screensize for mobile		$("iframe.img-fullsize").each(function() {			var new_height = Math.round($(this).attr('height')/($(this).attr('width')/280));			$(this).attr('height', new_height);			$(this).attr('width', '280px');		});		}    $('.is-modal-ad-close').click(hideAdModal);		var show_gif_play_desktop = false;     if ((is_mobile === false)&&(show_gif_play_desktop===false)) {		$(".gif").each(function() {			var gif_src = $(this).attr("src");			$(this).attr('src', gif_src.substr(0, gif_src.length-4) + ".gif");		});		}	else {		$(".gif").load( function() {			$(this).each(function() {			$(this).wrap( "<div class='gif-container' style=\"width:" + $(this).width() + "px;" + $(this).height() + "px\"></div>" );			});						$(".gif-container").each(function() {				if ($('a', this).length==0) {					$(this).append("<a href='javascript:;'></a>");										$( this).click(function() {			    	var gif_src = $(".gif", this).attr("src");			    	$("a", this).css('height', '24px');					$("a", this).css('margin-top', '-12px');					$("a", this).css('width', '24px');					$("a", this).css('margin-left', '-12px');					$("a", this).css('background-image', 'url("http://files.imishincdn.com/wp-content/themes/heftig/static/img/gif_loading.png")');										$(".gif", this).unbind();					$(".gif", this).load(function() {						$(this).parent().children("a").hide();					}).attr('src', gif_src.substr(0, gif_src.length-4) + ".gif");										});				}			});			});	}	showAdsenseModal();		$(".track-clicks").click(function(event) {		trackLogEvent($(this).attr('post_id'), $(this).attr('variation') , "variation_click");        setDoNotShowTestsInRecommended();		clicked_recommendation_url = $(this).attr('url');	});    if (is_mobile===false) {    	$('.nav-top').css('display', 'inline-block');	    $('.recommended').show();	    $('#lower-background').css('margin-bottom', '20px');    } else {	    	//show recommended on mobile devices	    	$('.recommended').show();	    	$(".footer").appendTo(".right-column");            $(".footer").css('padding', '10px 0');	    	$(".footer").css('background-color', '#FFF');	    	$(".footer").css('margin', '0px');	    	$('.recommended').css('box-shadow', 'none');	    	$('.right-column').css('margin-left', '0px');	    	$('.right-column').css('margin-top', '0px');	    	$('.right-column').css('width', '100%');	    	$('.page-content').css('box-shadow', 'none');    	    	$('.facebook-facepile-container').show();    }        //only show if user did not like already    if (likedFB() === false) {        //test facepile before shareRowBottom        $('<div class="facebook-facepile-container facebook-facepile-container-bottom" style="margin:0px;display:block;background-color:#EDEFF4;border-color:#D8DFEA;padding:0;padding:5px;"><div style="border:0px solid #000" class="fb-like facebook-facepile" data-href="https://www.facebook.com/chietoku.jp" height="20" data-width="250" data-layout="standard" data-action="like" data-show-faces="true" data-share="false"></div></div>').insertBefore('#shareRowBottom');        $('#shareRowBottom').css('margin-top', '0px');    } else {        $('.facebook-facepile-container').hide();    }    	var link_post_ids = [];	var link_variations = [];	$('.recommended-post').each(function() {		link_post_ids.push($(this).attr('post_id'));		link_variations.push($(this).attr('variation'));	});	if ((typeof post_id != "undefined") && (link_post_ids.length==link_variations.length)) {		if (typeof post_variation == "undefined") {			post_variation = "0";		}		trackLogEvent(post_id, post_variation, "view", link_post_ids, link_variations);        addDoNotShowInRecommended(post_id);	}}); /******************************************************************************* * Pinterest support	 * pinit.js laden wenn es ein data-pin-do='emedPin' gibt ******************************************************************************/ isPintLoaded = false;$(function(){  if (!isPintLoaded && $("a[data-pin-do='embedPin']").length) {      if (is_mobile) {          $("a[data-pin-do='embedPin']").each(function () {              $(this).attr("data-pin-width", "small");          });      }      isPintLoaded = true;      $.getScript("//assets.pinterest.com/js/pinit.js").fail(function () {          isPintLoaded = false;      });  }});</script><style type="text/css">	a:hover {	    border-bottom-color: #67bfff;	    color: #67bfff;	}</style><div class="page-all"><script>        refVideo = false;    </script><div style="display: inline-block;"><div class="ad-leaderboard" style="padding-top:10px;"><script type="text/javascript">        var is_single_page = true;		if (is_mobile === false) { 			document.write('<div id="div-gpt-ad-1444214629237-0">\x3Cscript type="text/javascript">googletag.cmd.push(function() { googletag.display("div-gpt-ad-1444214629237-0"); });\x3C/script></div>');	    } else if (is_mobile === true) {            $('.ad-leaderboard').hide();        }	</script></div><div class="page-content"><a name="top"></a><div class="header" style="position:relative"><a href="/" title><img src="http://files.imishincdn.com/wp-content/themes/heftig/static/img/logo_chietoku.svg" alt="logo" class="title__img"></a><div style="clear:both;"></div></div><script type="text/javascript">var post_id = 67540;var post_title = "[标题]";var post_title_utf8 = "[标题]";var fr_is_single_ad_test = false;var globalFacebookShareObject = {	'name' : '[标题]',	'link' : 'http://www.chietoku.jp/water-boiling/?ref=fb',	'short_link' : 'http://www.chietoku.jp/?p=67540',	'picture' : 'http://files.imishincdn.com/wp-content/uploads/2016/05/275ac846f1fc26efd8ba3bdfb166c071.jpeg',	'description' : '[描述]',	'caption' : 'chietoku.jp'};</script><script type="text/javascript">    if (is_mobile && is_allowed_is_today) {                is_allowed_is_today = false;            }</script><div class="post-content"><h1>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h1><div class="post-content-container"><div class="cl"></div><div class="share shareButtonContainer" id="shareTop"><a class="btn-share facebook_button analytic_event"><span class="textNode icon"><i class="icon-facebook"></i>Facebookでシェア</span></a><div class="cl cl2"></div></div>[metatags_descriptionx]<script>        if(is_mobile){        		            					function stretchForAd() {            						var adClass = '.mpad';            						var visiblePercentage = 0.4;            						var windowHeight = (window.innerHeight ? window.innerHeight : $(window).height());            						var adTop = $(adClass).offset().top;            						var adHeight = $(adClass).height();            						var stretch = windowHeight - (adHeight * visiblePercentage) - adTop;            						if ( stretch <= 0) {            							return;            						}            						var logoMarginBefore = parseFloat( $('.header').first().css('margin-top') );            						var h1MarginBefore = parseFloat( $('.post-title-container').first().css('margin-top') );            						var pMarginBefore = parseFloat( $('.post-content-container p').first().css('margin-top') );            						var adMarginBefore = parseFloat( $(adClass).first().css('margin-top') );            						stretch = stretch + logoMarginBefore + h1MarginBefore + pMarginBefore + adMarginBefore;            						var stretchEqual = stretch / 4.0;            						var fButton = $('#shareTop');            						if ( stretch > 170 || fButton.css('display') == 'inline-block' ) {            							if ( fButton.css('display') == 'inline-block' ) {            								stretch += parseFloat( fButton.first().css('margin-top') );            							} else {            								stretch -= 40;            							}            							var stretchEqual = stretch / 5.0;            							fButton.css({'display': 'inline-block', 'margin': '0', 'margin-top': stretchEqual});            						}            						$('.logo-header').first().css('margin-top', stretchEqual);            						$('.post-title-container').first().css({'margin-top': stretchEqual});            						$('.post-content-container p').first().css({'margin-top': stretchEqual});            						$(adClass).first().css('margin-top', stretchEqual);            					}            			        $(document).ready(function() {            			        	if (!showAdsenseIS()){            			        	    stretchForAd();            			        	}            			        });            			        $(window).bind('load', function() {            			            if (!showAdsenseIS()){            			        	    stretchForAd();                                    }            			        });            			                    document.write('<div class="mpad" style="height:260px"><div style="position:absolute;left:0;width:100%"><div style="width:300px;margin: 0 auto">');                document.write('<div id="div-gpt-ad-1450452939781-0" style="height:250px; width:300px;">\x3Cscript type="text/javascript">googletag.cmd.push(function() { googletag.display("div-gpt-ad-1450452939781-0"); });\x3C/script></div>');                document.write('</div></div></div>');        }        </script><style>	            			    	.post-content .post-title-container {	            			    		font-size: 1.7em;	            			    	}	            			    	.post-content .post-content-container p:first-of-type {	            			    		line-height: 1.5em;	            			    	}	            			    </style>[metatags_descriptionx]<script>         !function (){            if (is_mobile){                            document.write('<div style="height:260px"><div style="position:absolute;left:0;width:100%"><div style="width:300px;margin: 0 auto">');            document.write('<div id="div-gpt-ad-1444214629237-4" style="height:250px; width:300px;">\x3Cscript type="text/javascript">googletag.cmd.push(function() { googletag.display("div-gpt-ad-1444214629237-4"); });\x3C/script></div>');            document.write('</div></div></div>');            }else{                document.write('<div style="height:260px">');                document.write('<style>.side-by-side-ad{display:inline-block;} .side-by-side-ad ins{vertical-align:bottom}</style>');                document.write('<div class="side-by-side-ad">');                document.write('<div id="div-gpt-ad-1444214629237-1" style="height:250px; width:300px;">\x3Cscript type="text/javascript">googletag.cmd.push(function() { googletag.display("div-gpt-ad-1444214629237-1"); });\x3C/script></div>');                document.write('</div>');                document.write('<div class="side-by-side-ad" style="margin-left:30px;">');                document.write('\x3Cscript type="text/javascript">google_ad_client = "ca-pub-7710346033777109";google_ad_slot = "8399030309";google_ad_width = 300;google_ad_height = 250;\x3C/script>\x3Cscript type="text/javascript" src="//pagead2.googlesyndication.com/pagead/show_ads.js">\x3C/script>');                document.write('</div>');                document.write('</div>')        }        }();</script>[metatags_descriptionx]<script>        if (!is_mobile){$(".fb-post").removeAttr('data-width');}    </script>[metatags_descriptionx]<a class="btn-share facebook_button analytic_event"><span class="textNode icon"><i class="icon-facebook"></i>Facebookでシェア</span></a><div class="cl"></div></div><script>        function getTestableTest() {            var dnsir = getDoNotShowInRecommended();            if (typeof rec_tests === "undefined") {                return false;            }            var tests = rec_tests.tests;            for (var i = 0, l = tests.length; i < l; i++) {                if ($.inArray(tests[i].id + '', dnsir) == -1 && tests[i].variations.length > 0) {                    return tests[i];                }            }            return false;        }        function getHtmlForTest(id, headline, img, link, variation_no, num, isTest ) {            var html = [];            if (is_mobile) {                html.push('<a style="border-bottom: 0;margin-bottom: 15px;display: block;width:100%;" class="recommended-post track-clicks" post_id="');                html.push(id);                html.push('" variation="');                html.push(variation_no);                if (isTest){                    html.push('" href="javascript:;" url="');                }else{                    html.push('" href="');                }                html.push(link);                html.push('"><img style="width:100%;" src="');                html.push(img);            } else {                html.push('<a style="display:block;width:370px;border:none;');                html.push(num % 2 != 0 ? 'float:right' : 'float:left;clear:both');                html.push('" class="recommended-post track-clicks" post_id="');                html.push(id);                html.push('" variation="');                html.push(variation_no);                if (isTest){                    html.push('" href="javascript:;" url="');                }else{                    html.push('" href="');                }                html.push(link);                html.push('"><img width="370" src="');                html.push(img);            }            html.push('"><h4>');            html.push(headline);            html.push('</h4></a>');            return html.join('');        }        function writeRJS() {            if (!showTestsInRecommended()) {                return false;            }            var test = getTestableTest();            if (test === false) {                return false;            }            var variation = test.variations[(Math.floor(Math.random() * test.variations.length))];            if (is_mobile && variation.headline.length > 90) {                variation.headline = variation.headline.substr(0, 90) + '...';            }            document.write('<div id="below-article-recommended">' +            '<div id="below-article-recommended-inner" style="">' +            '<h2>[H2]</h2>');            document.write(getHtmlForTest(test.id, variation.headline, variation.img, variation.link, variation.variation_no, 0, true));            document.write('<div style="clear:both"></div></div></div>');            return true;        }        function loadMPR() {            mp.post.recommended.setup(                'http://www.chietoku.jp/_lifehacks_json/recommended.json',                'http://log.imishin.jp/log_event.php',                getHtmlForTest);        }        function load0Json() {            var DISPLAY_MAX_REC = 12;            var $recContainer = $('.js-rec-container');            var $csLoader = $recContainer.find('.js-cs-loader');            $recContainer.append($csLoader);            $.ajax({                url: 'http://www.chietoku.jp/_lifehacks_json/0.json',                dataType: 'json',                success: function (data) {                    var $recContainer = $('.js-rec-container');                    if (data.hasOwnProperty('feed')) {                        var feed = data.feed;                        var recHtml = '';                        for (var i = 0, c = 0, l = feed.length; i < l; i++) {                            var f = feed[i];                            if (f.id == post_id) {                                continue;                            }                            recHtml += getHtmlForTest(f.id, f.headline, f.img, f.link, '0_0', c++, false);                            if (c >= DISPLAY_MAX_REC) {                                break;                            }                        }                        $recContainer.append(recHtml);                        $recContainer.find('.recommended-post').click(function(){                            var d = new Date();                            var s = '9'+(('0' + d.getDate()).slice(-2))                                + (('0' + (d.getMonth() + 1)).slice(-2))                                + ('' + d.getFullYear());                            $.get('http://log.imishin.jp/log_event.php?v=2&m='+(is_mobile?1:0)+'&post_id='+s+'&event=variation_click&var=0_99');                        });                    }                    $csLoader.hide();                },                error: function () {                    $csLoader.hide();                }            });        }        function writeFbComments(){            document.write('<h2>[H2]</h2>');            document.write('<div class="fb-comments" data-href="http://www.chietoku.jp/water-boiling/" data-numposts="5" data-width="100%"></div>');        }        var mainScriptWantsToWriteRJS = true;        function writeRJSFull(){            writeRJS();            //https://github.com/customd/jquery-visible            //+innerHeight fix iphone/mobileSafari            ;(function(e){e.fn.visible=function(t,n,r){var i=e(this).eq(0),s=i.get(0),o=e(window),u=o.scrollTop(),a=u+(window.innerHeight?window.innerHeight:o.height()),f=o.scrollLeft(),l=f+o.width(),c=i.offset().top,h=c+i.height(),p=i.offset().left,d=p+i.width(),v=t===true?h:c,m=t===true?c:h,g=t===true?d:p,y=t===true?p:d,b=n===true?s.offsetWidth*s.offsetHeight:true,r=r?r:"both";if(r==="both")return!!b&&m<=a&&v>=u&&y<=l&&g>=f;else if(r==="vertical")return!!b&&m<=a&&v>=u;else if(r==="horizontal")return!!b&&y<=l&&g>=f}})(jQuery);            !function() {                var $barRp = [];                $(window).scroll(function () {                    checkRecommendedVisibility();                });                $(function () {                    $barRp = $("#below-article-recommended").find(".recommended-post");                });                function checkRecommendedVisibility() {                    if ($barRp.length > 0) {                        var viewed = [];                        $barRp.each(function (i, el) {                            if ($(el).visible(false, true)) {                                viewed.push(i);                            }                        });                        var vl = viewed.length;                        if (vl > 0) {                            var i, barRpIndex, el, postId = [], postVariation = [], event = [];                            for (i = 0; i < vl; i++) {                                barRpIndex = viewed[i];                                el = $($barRp[barRpIndex]);                                postId.push(el.attr('post_id'));                                postVariation.push(el.attr('variation'));                                event.push("var_link_view");                                if(el.attr('variation') != "0_0")addDoNotShowInRecommended(el.attr('post_id'));                            }                            $barRp = $barRp.filter(function (i) {                                return ($.inArray(i, viewed) == -1);                            });                            trackLogEventV2(postId,postVariation,event);                        }                    }                }            }();        }    </script><script src="http://www.chietoku.jp/_lifehacks_json/rec_tests/"></script><script>            fr_is_single_ad_test = showTestsInRecommended() && !!getTestableTest();                        function writeRevcontentAdCode(id,w){                document.write('<div id="'+id+'"></div>');                (function() {                    var rcel = document.createElement("script");                    rcel.id = 'rc_' + Math.floor(Math.random() * 1000);                    rcel.type = 'text/javascript';                    rcel.src = "http://trends.revcontent.com/serve.js.php?revsub[post_id]="+post_id+"&w="+w+"&t="+rcel.id+"&c="+(new Date()).getTime()+"&width="+(window.outerWidth || document.documentElement.clientWidth);                    rcel.async = true;                    var rcds = document.getElementById(id); rcds.appendChild(rcel);                })();            }            function writeRevcontent() {                                                if (is_mobile) {                                        writeRevcontentAdCode("rcjsload_e92c07",27884);                                    } else {                                        writeRevcontentAdCode("rcjsload_73dca9",27896);                                    }                            }            function writeBottomAds(){                writeRevcontent();            }            function writeTestAds(){                writeRevcontent();            }                    </script><script>        writeRJSFull();                if (!fr_is_single_ad_test || post_show_all_ads) {            if ("function" == typeof writeBottomAds) {                writeBottomAds();            }        }        if (fr_is_single_ad_test && !post_show_all_ads) {            writeTestAds();        }    </script><h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2><div class="fb-comments" data-href="http://www.chietoku.jp/water-boiling/" data-numposts="5" data-width="100%"></div><div id="below-article-recommended"><div id="below-article-recommended-inner"><h2>[metatags_titlex],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[hrefx],[metatags_titlex],[metatags_titlex],[hrefx][hrefx],[metatags_titlex],[metatags_titlex],[metatags_titlex],[metatags_titlex]</h2><div class="js-rec-container"><div class="loader loader--center js-cs-loader"><div class="loader__box"></div><div class="loader__box"></div><div class="loader__box"></div><div class="loader__box"></div><div style="clear:both"></div></div></div></div></div><script>        // load0Json();        loadMPR();    </script></div><script type="text/javascript">$(function () {    $('#shareTop .facebook_button').click(function () { shareOnFacebook('shareTop'); });    $('#shareRowBottom .facebook_button').click(function () { shareOnFacebook('shareRowBottom'); });    if (is_mobile && (cms_lang == "de" || cms_lang == 'fr' /* || cms_lang == 'pt' */) && typeof is_single_page != "undefined" && is_single_page) {        !function () {            var stickyShown = false;            $(window).scroll(function () {                if (!stickyShown && $(window).scrollTop() > (window.innerHeight ? window.innerHeight : $(window).height())) {                    stickyShown = true;                    showStickyWerbung();                }            });        }();    }});function showStickyWerbung(){    $stickyBottomRow = $("#sticky-bottom-row");    $pageAll = $(".page-all");    $stickyBottomRow.show();    $stickyBottomRow.css({"text-align": "center", "height": "50px"});    $pageAll.css({"padding-bottom": "40px"});}</script><div class="afs_ads">&nbsp;</div><script>    function testAdBlock() {        setTimeout(function() {            if( !document.getElementsByClassName ) return;            var ads = document.getElementsByClassName('afs_ads'),                ad  = ads[ads.length - 1];            if(!ad || ad.innerHTML.length === 0 || ad.clientHeight === 0) {                if ( typeof ga !== 'undefined' ) {                    ga('send', 'event', 'ads', 'activated', 'ad blocker', { nonInteraction: true });                } else if ( typeof _gat !== 'undefined' && typeof pageTracker !== 'undefined' ) {                    pageTracker._trackEvent('ads', 'activated', 'ad blocker', undefined, true);                } else if ( typeof _gaq !== 'undefined' ) {                    _gaq.push(['_trackEvent', 'ads', 'activated', 'ad blocker', undefined, true]);                }            } else {                if ( typeof ga !== 'undefined' ) {                    ga('send', 'event', 'ads', 'not active', 'ad blocker', { nonInteraction: true });                } else if ( typeof _gat !== 'undefined' && typeof pageTracker !== 'undefined' ) {                    pageTracker._trackEvent('ads', 'not active', 'ad blocker', undefined, true);                } else if ( typeof _gaq !== 'undefined' ) {                    _gaq.push(['_trackEvent', 'ads', 'not active', 'ad blocker', undefined, true]);                }            }        }, 2000);    }    if ( document.cookie.indexOf('session') <= 0 ) {        if(window.addEventListener) {            window.addEventListener('load', testAdBlock, false);        } else {            window.attachEvent('onload', testAdBlock);        }    }    var d = new Date();    d.setTime(d.getTime()+1800000);    var expires = 'expires='+d.toGMTString();    document.cookie = 'session=1; '+expires+'; path=/';</script></div><div class="right-column"><div class="ad-skyscraper" style="min-width:160px;margin-bottom:5px;"><script type="text/javascript">	    if (is_mobile === false) {            document.write('<div id="div-gpt-ad-1444214629237-2" style="width:300px;">\x3Cscript type="text/javascript">googletag.cmd.push(function() { googletag.display("div-gpt-ad-1444214629237-2"); });\x3C/script></div>');	    }	</script></div><style>        .bottom-right{            float:none;            width:100%;        }        @media (max-width: 1225px) {            .bottom-right{                display:none;            }        }    </style><div class="bottom-right"><a href="https://facebook.com/chietoku.jp" class="follow follow--facebook"><svg class="follow__icon" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg"><path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759h-306v-759h-255v-296h255v-218q0-186 104-288.5t277-102.5q147 0 228 12z"></path></svg><span class="follow__txt">Facebookでフォローする</span><span class="follow__txt_short">Facebook</span></a><div class="link_block"><form method="get" action="/search/" class="search" style="padding:0"><input type="search" name="q" class="search__input" placeholder="検索"><button type="submit" class="search__button" style="right:0"><svg width="18" height="18" viewBox="0 0 1792 1792" xmlns="http://www.w3.org/2000/svg" fill="#757575" style="position:relative;top:2px;"><path d="M1216 832q0-185-131.5-316.5t-316.5-131.5-316.5 131.5-131.5 316.5 131.5 316.5 316.5 131.5 316.5-131.5 131.5-316.5zm512 832q0 52-38 90t-90 38q-54 0-90-38l-343-342q-179 124-399 124-143 0-273.5-55.5t-225-150-150-225-55.5-273.5 55.5-273.5 150-225 225-150 273.5-55.5 273.5 55.5 225 150 150 225 55.5 273.5q0 220-124 399l343 343q37 37 37 90z"/></svg></button></form><div style="text-align:right"><ul class><li class><a class href="http://www.mediapartisans.com/#career">求人情報</a></li><li class><a class href="/contact/">お問い合わせ</a></li><li>[hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx][hrefx]</li></ul><div style="border-top: 1px solid #ccc;color: #bbb;margin-top: 5px;font-size: 0.7em;font-weight: 100;">© Media Partisans GmbH. All Rights reserved.</div></div></div></div> <script type="text/javascript">    	if (is_mobile==true) {	    	$('.ad-skyscraper').hide();	    }    </script></div><div class="cl"></div></div></div></body></html>